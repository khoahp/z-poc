/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.zeus.hr.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.zeus.hr.model.Candidate;
import com.zeus.hr.model.CandidateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;zhr_Candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CandidateImpl
 * @see Candidate
 * @see CandidateModel
 * @generated
 */
@ProviderType
public class CandidateModelImpl extends BaseModelImpl<Candidate>
	implements CandidateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate model instance should use the {@link Candidate} interface instead.
	 */
	public static final String TABLE_NAME = "zhr_Candidate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "candidateId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "mobilePhone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "city", Types.BIGINT },
			{ "appliedFor", Types.VARCHAR },
			{ "note", Types.VARCHAR },
			{ "skills", Types.VARCHAR },
			{ "source", Types.VARCHAR },
			{ "internalId", Types.VARCHAR },
			{ "receivedDate", Types.TIMESTAMP },
			{ "internalNote", Types.VARCHAR },
			{ "internalDetails", Types.VARCHAR },
			{ "attachment", Types.VARCHAR },
			{ "rating", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createdUser", Types.BIGINT },
			{ "modifiedUser", Types.BIGINT },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appliedFor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skills", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("internalNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attachment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rating", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table zhr_Candidate (uuid_ VARCHAR(75) null,candidateId LONG not null primary key,companyId LONG,groupId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null,dateOfBirth DATE null,mobilePhone VARCHAR(75) null,email VARCHAR(75) null,city LONG,appliedFor VARCHAR(75) null,note VARCHAR(75) null,skills VARCHAR(75) null,source VARCHAR(75) null,internalId VARCHAR(75) null,receivedDate DATE null,internalNote VARCHAR(75) null,internalDetails VARCHAR(75) null,attachment VARCHAR(75) null,rating INTEGER,createDate DATE null,modifiedDate DATE null,createdUser LONG,modifiedUser LONG,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table zhr_Candidate";
	public static final String ORDER_BY_JPQL = " ORDER BY candidate.candidateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY zhr_Candidate.candidateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.poc.candidate.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.zeus.hr.model.Candidate"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.poc.candidate.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.zeus.hr.model.Candidate"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.poc.candidate.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.zeus.hr.model.Candidate"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long CANDIDATEID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.poc.candidate.service.util.ServiceProps.get(
				"lock.expiration.time.com.zeus.hr.model.Candidate"));

	public CandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidate.class;
	}

	@Override
	public String getModelClassName() {
		return Candidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("candidateId", getCandidateId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("mobilePhone", getMobilePhone());
		attributes.put("email", getEmail());
		attributes.put("city", getCity());
		attributes.put("appliedFor", getAppliedFor());
		attributes.put("note", getNote());
		attributes.put("skills", getSkills());
		attributes.put("source", getSource());
		attributes.put("internalId", getInternalId());
		attributes.put("receivedDate", getReceivedDate());
		attributes.put("internalNote", getInternalNote());
		attributes.put("internalDetails", getInternalDetails());
		attributes.put("attachment", getAttachment());
		attributes.put("rating", getRating());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createdUser", getCreatedUser());
		attributes.put("modifiedUser", getModifiedUser());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long candidateId = (Long)attributes.get("candidateId");

		if (candidateId != null) {
			setCandidateId(candidateId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		String mobilePhone = (String)attributes.get("mobilePhone");

		if (mobilePhone != null) {
			setMobilePhone(mobilePhone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long city = (Long)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String appliedFor = (String)attributes.get("appliedFor");

		if (appliedFor != null) {
			setAppliedFor(appliedFor);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String skills = (String)attributes.get("skills");

		if (skills != null) {
			setSkills(skills);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String internalId = (String)attributes.get("internalId");

		if (internalId != null) {
			setInternalId(internalId);
		}

		Date receivedDate = (Date)attributes.get("receivedDate");

		if (receivedDate != null) {
			setReceivedDate(receivedDate);
		}

		String internalNote = (String)attributes.get("internalNote");

		if (internalNote != null) {
			setInternalNote(internalNote);
		}

		String internalDetails = (String)attributes.get("internalDetails");

		if (internalDetails != null) {
			setInternalDetails(internalDetails);
		}

		String attachment = (String)attributes.get("attachment");

		if (attachment != null) {
			setAttachment(attachment);
		}

		Integer rating = (Integer)attributes.get("rating");

		if (rating != null) {
			setRating(rating);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createdUser = (Long)attributes.get("createdUser");

		if (createdUser != null) {
			setCreatedUser(createdUser);
		}

		Long modifiedUser = (Long)attributes.get("modifiedUser");

		if (modifiedUser != null) {
			setModifiedUser(modifiedUser);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_candidateId = candidateId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public long getCity() {
		return _city;
	}

	@Override
	public void setCity(long city) {
		_city = city;
	}

	@Override
	public String getAppliedFor() {
		if (_appliedFor == null) {
			return StringPool.BLANK;
		}
		else {
			return _appliedFor;
		}
	}

	@Override
	public void setAppliedFor(String appliedFor) {
		_appliedFor = appliedFor;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public String getSkills() {
		if (_skills == null) {
			return StringPool.BLANK;
		}
		else {
			return _skills;
		}
	}

	@Override
	public void setSkills(String skills) {
		_skills = skills;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getInternalId() {
		if (_internalId == null) {
			return StringPool.BLANK;
		}
		else {
			return _internalId;
		}
	}

	@Override
	public void setInternalId(String internalId) {
		_internalId = internalId;
	}

	@Override
	public Date getReceivedDate() {
		return _receivedDate;
	}

	@Override
	public void setReceivedDate(Date receivedDate) {
		_receivedDate = receivedDate;
	}

	@Override
	public String getInternalNote() {
		if (_internalNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _internalNote;
		}
	}

	@Override
	public void setInternalNote(String internalNote) {
		_internalNote = internalNote;
	}

	@Override
	public String getInternalDetails() {
		if (_internalDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _internalDetails;
		}
	}

	@Override
	public void setInternalDetails(String internalDetails) {
		_internalDetails = internalDetails;
	}

	@Override
	public String getAttachment() {
		if (_attachment == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachment;
		}
	}

	@Override
	public void setAttachment(String attachment) {
		_attachment = attachment;
	}

	@Override
	public int getRating() {
		return _rating;
	}

	@Override
	public void setRating(int rating) {
		_rating = rating;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatedUser() {
		return _createdUser;
	}

	@Override
	public void setCreatedUser(long createdUser) {
		_createdUser = createdUser;
	}

	@Override
	public long getModifiedUser() {
		return _modifiedUser;
	}

	@Override
	public void setModifiedUser(long modifiedUser) {
		_modifiedUser = modifiedUser;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Candidate.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Candidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Candidate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setUuid(getUuid());
		candidateImpl.setCandidateId(getCandidateId());
		candidateImpl.setCompanyId(getCompanyId());
		candidateImpl.setGroupId(getGroupId());
		candidateImpl.setFirstName(getFirstName());
		candidateImpl.setLastName(getLastName());
		candidateImpl.setDateOfBirth(getDateOfBirth());
		candidateImpl.setMobilePhone(getMobilePhone());
		candidateImpl.setEmail(getEmail());
		candidateImpl.setCity(getCity());
		candidateImpl.setAppliedFor(getAppliedFor());
		candidateImpl.setNote(getNote());
		candidateImpl.setSkills(getSkills());
		candidateImpl.setSource(getSource());
		candidateImpl.setInternalId(getInternalId());
		candidateImpl.setReceivedDate(getReceivedDate());
		candidateImpl.setInternalNote(getInternalNote());
		candidateImpl.setInternalDetails(getInternalDetails());
		candidateImpl.setAttachment(getAttachment());
		candidateImpl.setRating(getRating());
		candidateImpl.setCreateDate(getCreateDate());
		candidateImpl.setModifiedDate(getModifiedDate());
		candidateImpl.setCreatedUser(getCreatedUser());
		candidateImpl.setModifiedUser(getModifiedUser());
		candidateImpl.setStatus(getStatus());

		candidateImpl.resetOriginalValues();

		return candidateImpl;
	}

	@Override
	public int compareTo(Candidate candidate) {
		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Candidate)) {
			return false;
		}

		Candidate candidate = (Candidate)obj;

		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CandidateModelImpl candidateModelImpl = this;

		candidateModelImpl._originalUuid = candidateModelImpl._uuid;

		candidateModelImpl._originalCompanyId = candidateModelImpl._companyId;

		candidateModelImpl._setOriginalCompanyId = false;

		candidateModelImpl._originalGroupId = candidateModelImpl._groupId;

		candidateModelImpl._setOriginalGroupId = false;

		candidateModelImpl._setModifiedDate = false;

		candidateModelImpl._originalStatus = candidateModelImpl._status;

		candidateModelImpl._setOriginalStatus = false;

		candidateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Candidate> toCacheModel() {
		CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

		candidateCacheModel.uuid = getUuid();

		String uuid = candidateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			candidateCacheModel.uuid = null;
		}

		candidateCacheModel.candidateId = getCandidateId();

		candidateCacheModel.companyId = getCompanyId();

		candidateCacheModel.groupId = getGroupId();

		candidateCacheModel.firstName = getFirstName();

		String firstName = candidateCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			candidateCacheModel.firstName = null;
		}

		candidateCacheModel.lastName = getLastName();

		String lastName = candidateCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			candidateCacheModel.lastName = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			candidateCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			candidateCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		candidateCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = candidateCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			candidateCacheModel.mobilePhone = null;
		}

		candidateCacheModel.email = getEmail();

		String email = candidateCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			candidateCacheModel.email = null;
		}

		candidateCacheModel.city = getCity();

		candidateCacheModel.appliedFor = getAppliedFor();

		String appliedFor = candidateCacheModel.appliedFor;

		if ((appliedFor != null) && (appliedFor.length() == 0)) {
			candidateCacheModel.appliedFor = null;
		}

		candidateCacheModel.note = getNote();

		String note = candidateCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			candidateCacheModel.note = null;
		}

		candidateCacheModel.skills = getSkills();

		String skills = candidateCacheModel.skills;

		if ((skills != null) && (skills.length() == 0)) {
			candidateCacheModel.skills = null;
		}

		candidateCacheModel.source = getSource();

		String source = candidateCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			candidateCacheModel.source = null;
		}

		candidateCacheModel.internalId = getInternalId();

		String internalId = candidateCacheModel.internalId;

		if ((internalId != null) && (internalId.length() == 0)) {
			candidateCacheModel.internalId = null;
		}

		Date receivedDate = getReceivedDate();

		if (receivedDate != null) {
			candidateCacheModel.receivedDate = receivedDate.getTime();
		}
		else {
			candidateCacheModel.receivedDate = Long.MIN_VALUE;
		}

		candidateCacheModel.internalNote = getInternalNote();

		String internalNote = candidateCacheModel.internalNote;

		if ((internalNote != null) && (internalNote.length() == 0)) {
			candidateCacheModel.internalNote = null;
		}

		candidateCacheModel.internalDetails = getInternalDetails();

		String internalDetails = candidateCacheModel.internalDetails;

		if ((internalDetails != null) && (internalDetails.length() == 0)) {
			candidateCacheModel.internalDetails = null;
		}

		candidateCacheModel.attachment = getAttachment();

		String attachment = candidateCacheModel.attachment;

		if ((attachment != null) && (attachment.length() == 0)) {
			candidateCacheModel.attachment = null;
		}

		candidateCacheModel.rating = getRating();

		Date createDate = getCreateDate();

		if (createDate != null) {
			candidateCacheModel.createDate = createDate.getTime();
		}
		else {
			candidateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			candidateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			candidateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		candidateCacheModel.createdUser = getCreatedUser();

		candidateCacheModel.modifiedUser = getModifiedUser();

		candidateCacheModel.status = getStatus();

		return candidateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", candidateId=");
		sb.append(getCandidateId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", mobilePhone=");
		sb.append(getMobilePhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", appliedFor=");
		sb.append(getAppliedFor());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", skills=");
		sb.append(getSkills());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", internalId=");
		sb.append(getInternalId());
		sb.append(", receivedDate=");
		sb.append(getReceivedDate());
		sb.append(", internalNote=");
		sb.append(getInternalNote());
		sb.append(", internalDetails=");
		sb.append(getInternalDetails());
		sb.append(", attachment=");
		sb.append(getAttachment());
		sb.append(", rating=");
		sb.append(getRating());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createdUser=");
		sb.append(getCreatedUser());
		sb.append(", modifiedUser=");
		sb.append(getModifiedUser());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("com.zeus.hr.model.Candidate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidateId</column-name><column-value><![CDATA[");
		sb.append(getCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
		sb.append(getMobilePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appliedFor</column-name><column-value><![CDATA[");
		sb.append(getAppliedFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>skills</column-name><column-value><![CDATA[");
		sb.append(getSkills());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalId</column-name><column-value><![CDATA[");
		sb.append(getInternalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivedDate</column-name><column-value><![CDATA[");
		sb.append(getReceivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalNote</column-name><column-value><![CDATA[");
		sb.append(getInternalNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalDetails</column-name><column-value><![CDATA[");
		sb.append(getInternalDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachment</column-name><column-value><![CDATA[");
		sb.append(getAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rating</column-name><column-value><![CDATA[");
		sb.append(getRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Candidate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Candidate.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _candidateId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _firstName;
	private String _lastName;
	private Date _dateOfBirth;
	private String _mobilePhone;
	private String _email;
	private long _city;
	private String _appliedFor;
	private String _note;
	private String _skills;
	private String _source;
	private String _internalId;
	private Date _receivedDate;
	private String _internalNote;
	private String _internalDetails;
	private String _attachment;
	private int _rating;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdUser;
	private long _modifiedUser;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Candidate _escapedModel;
}